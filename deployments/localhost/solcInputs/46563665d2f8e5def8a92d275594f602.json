{
  "language": "Solidity",
  "sources": {
    "contracts/DigitalIdentityManagement.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ncontract DigitalIdentityManagement {\r\n    uint256 public serviceProvidersCount; // Variable to store the number of service providers\r\n    address[] public serviceProviderAddresses; // Array to store service provider addresses\r\n    struct User {\r\n        string user_FirstName;\r\n        string user_MiddleName;\r\n        string user_LastName;\r\n        string user_Email;\r\n        string user_dob;\r\n        string user_pno;\r\n        string userPhysicalAddress;\r\n        bool isUserSet;\r\n        mapping(address => bool) userAccessList; // Mapping of service providers with access\r\n    }\r\n\r\n    struct ServiceProvider {\r\n        address serviceProviderAddress;\r\n        string serviceProviderName;\r\n        bool isRegistered;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n    mapping(address => ServiceProvider) public serviceProviders;\r\n\r\n    event UserAdded(address indexed userAddress);\r\n    event ServiceProviderAdded(address indexed serviceProviderAddress);\r\n    event ServiceProviderRemoved(address indexed serviceProviderAddress);\r\n    event AccessGranted(address indexed userAddress, address indexed serviceProviderAddress);\r\n    event AccessRevoked(address indexed userAddress, address indexed serviceProviderAddress);\r\n    event UserUpdated(address indexed userAddress);\r\n\r\n\r\n    // Function to allow users to add their data\r\n    function addUser(\r\n        string memory _firstName,\r\n        string memory _middleName,\r\n        string memory _lastName,\r\n        string memory _email,\r\n        string memory _dob,\r\n        string memory _pno,\r\n        string memory _physicalAddress\r\n    ) external {\r\n        User storage user = users[msg.sender];\r\n        user.user_FirstName = _firstName;\r\n        user.user_MiddleName = _middleName;\r\n        user.user_LastName = _lastName;\r\n        user.user_Email = _email;\r\n        user.user_dob = _dob;\r\n        user.user_pno = _pno;\r\n        user.userPhysicalAddress = _physicalAddress;\r\n        user.isUserSet = true;\r\n\r\n        emit UserAdded(msg.sender);\r\n    }\r\n\r\n    // Function to update user data\r\n    function updateUser(\r\n        string memory _firstName,\r\n        string memory _middleName,\r\n        string memory _lastName,\r\n        string memory _email,\r\n        string memory _dob,\r\n        string memory _pno,\r\n        string memory _physicalAddress\r\n    ) external {\r\n        User storage user = users[msg.sender];\r\n        require(user.isUserSet, \"User not found\");\r\n        \r\n        user.user_FirstName = _firstName;\r\n        user.user_MiddleName = _middleName;\r\n        user.user_LastName = _lastName;\r\n        user.user_Email = _email;\r\n        user.user_dob = _dob;\r\n        user.user_pno = _pno;\r\n        user.userPhysicalAddress = _physicalAddress;\r\n\r\n        emit UserUpdated(msg.sender);\r\n    }\r\n\r\n    // Function to add a service provider\r\n    function addServiceProvider(address _serviceProviderAddress, string memory _serviceProviderName) external {\r\n        ServiceProvider storage provider = serviceProviders[_serviceProviderAddress];\r\n        require(!provider.isRegistered, \"Service Provider is already registered\");\r\n\r\n        provider.serviceProviderAddress = _serviceProviderAddress;\r\n        provider.serviceProviderName = _serviceProviderName;\r\n        provider.isRegistered = true;\r\n        serviceProvidersCount++; // Increment the count\r\n        serviceProviderAddresses.push(_serviceProviderAddress); // Add the address to the array\r\n\r\n        emit ServiceProviderAdded(_serviceProviderAddress);\r\n    }\r\n    // Function to remove a service provider\r\n    function removeServiceProvider(address _serviceProviderAddress) external {\r\n        ServiceProvider storage provider = serviceProviders[_serviceProviderAddress];\r\n        require(provider.isRegistered, \"Service Provider not registered\");\r\n\r\n        delete serviceProviders[_serviceProviderAddress];\r\n        serviceProvidersCount--; // Decrement the count\r\n        for (uint256 i = 0; i < serviceProviderAddresses.length; i++) {\r\n            if (serviceProviderAddresses[i] == _serviceProviderAddress) {\r\n                serviceProviderAddresses[i] = serviceProviderAddresses[serviceProviderAddresses.length - 1];\r\n                serviceProviderAddresses.pop();\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit ServiceProviderRemoved(_serviceProviderAddress);\r\n    }\r\n\r\n\r\n    // Function to grant access to a service provider\r\n    function grantAccess(address _serviceProviderAddress) external {\r\n        require(users[msg.sender].isUserSet, \"User not found\");\r\n        require(serviceProviders[_serviceProviderAddress].isRegistered, \"Service Provider not registered\");\r\n        require(!users[msg.sender].userAccessList[_serviceProviderAddress], \"Access already granted\");\r\n\r\n        users[msg.sender].userAccessList[_serviceProviderAddress] = true;\r\n\r\n        emit AccessGranted(msg.sender, _serviceProviderAddress);\r\n    }\r\n\r\n    // Function to revoke access from a service provider\r\n    function revokeAccess(address _serviceProviderAddress) external {\r\n        require(users[msg.sender].isUserSet, \"User not found\");\r\n        require(serviceProviders[_serviceProviderAddress].isRegistered, \"Service Provider not registered\");\r\n        require(users[msg.sender].userAccessList[_serviceProviderAddress], \"Access not granted\");\r\n\r\n        users[msg.sender].userAccessList[_serviceProviderAddress] = false;\r\n\r\n        emit AccessRevoked(msg.sender, _serviceProviderAddress);\r\n    }\r\n\r\n    // Function to get user details\r\n    function getUserDetails(address _userAddress) external view returns (\r\n        string memory user_FirstName,\r\n        string memory user_MiddleName,\r\n        string memory user_LastName,\r\n        string memory user_Email,\r\n        string memory user_dob,\r\n        string memory user_pno,\r\n        string memory userPhysicalAddress\r\n    ) {\r\n        if (_userAddress == address(0)) {\r\n            require(users[msg.sender].isUserSet, \"User not found\");\r\n            _userAddress = msg.sender;\r\n        } else {\r\n            require(users[_userAddress].isUserSet, \"User not found\");\r\n        }\r\n\r\n        require(\r\n            msg.sender == _userAddress || users[_userAddress].userAccessList[msg.sender],\r\n            \"Access denied\"\r\n        );\r\n\r\n        User storage user = users[_userAddress];\r\n        return (\r\n            user.user_FirstName,\r\n            user.user_MiddleName,\r\n            user.user_LastName,\r\n            user.user_Email,\r\n            user.user_dob,\r\n            user.user_pno,\r\n            user.userPhysicalAddress\r\n        );\r\n    }\r\n    // Function to get the list of service provider addresses with access\r\n    // Function to get the list of service provider addresses with access for the current user\r\n    function getUserAccessList() external view returns (address[] memory) {\r\n        require(users[msg.sender].isUserSet, \"User not found\");\r\n\r\n        address[] memory accessList = new address[](serviceProvidersCount);\r\n        uint256 count = 0;\r\n\r\n        for (uint256 i = 0; i < serviceProvidersCount; i++) {\r\n            address serviceProviderAddress = serviceProvidersByIndex(i);\r\n            if (users[msg.sender].userAccessList[serviceProviderAddress]) {\r\n                accessList[count] = serviceProviderAddress;\r\n                count++;\r\n            }\r\n        }\r\n\r\n        // Resize the array to the actual count\r\n        assembly {\r\n            mstore(accessList, count)\r\n        }\r\n\r\n        return accessList;\r\n    }\r\n\r\n    // Helper function to get a registered service provider address by index\r\n    function serviceProvidersByIndex(uint256 index) public view returns (address) {\r\n        require(index < serviceProvidersCount, \"Index out of bounds\");\r\n        \r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < serviceProviderAddresses.length; i++) {\r\n            address serviceProviderAddress = serviceProviderAddresses[i];\r\n            if (serviceProviders[serviceProviderAddress].isRegistered) {\r\n                if (count == index) {\r\n                    return serviceProviderAddress;\r\n                }\r\n                count++;\r\n            }\r\n        }\r\n        \r\n        revert(\"Service provider not found\");\r\n    }\r\n\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}